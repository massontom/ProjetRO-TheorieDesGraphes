Gestion de la vue : 
Drop view Points;
Create or replace view Points as 


Selectionner les points de localisation :

1 point par mois
select * from spatialisation where date in (select date from (select date, row_number() over(partition by extract(year from date), extract(month from date) order by date) from spatialisation) as foo where row_number=1);


1 point par jour
select * from spatialisation where date in (select date from (select date, row_number() over(partition by extract(year from date), extract(day from date), extract(month from date) order by date) from spatialisation) as foo where row_number=1);

1 point par heure
select * from spatialisation where date in (select date from (select date, row_number() over(partition by extract(year from date), extract(month from date), extract(day from date), extract(hour from date) order by date) from spatialisation) as foo where row_number=1);

1 point par minute
select * from spatialisation where date in (select date from (select date, row_number() over(partition by extract(year from date), extract(month from date), extract(day from date), extract(hour from date), extract(minute from date) order by date) from spatialisation) as foo where row_number=1);

Tous les points différents
select * from spatialisation;


Pour terminer la séléction : 
select distinct(ST_AsText(location)) from Points;

Selectionner les frontières : 

Frontières des départements dans lesquels il y a des points :
select  ST_AsText((ST_DumpPoints(ST_Multi(ST_union (spatialrepresentation)))).geom) from communes where "codeDepartement" in (select distinct("idDepartement") from Points) group by "codeDepartement";


Frontières des villes dans lesquelles il y a des points :
select ST_AsText((ST_DumpPoints(ST_Multi(ST_union (spatialrepresentation)))).geom) from communes where "codeInsee" in (select distinct("idCommune") from Points) group by "codeInsee";

